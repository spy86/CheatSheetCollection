<!DOCTYPE HTML>
<html id="hs-topic-p">
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>BashRegex</title>
<meta charset="windows-1250" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content="HelpSmith 8.0 (Build 18.1202)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  margin: 0 8px 0 8px;
}
</style>
<link type="text/css" rel="stylesheet" href="../css/topics/style.css" />
<script type="text/javascript" src="../js/jquery-3.3.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?1845a896"></script>
<script type="text/javascript" src="../js/core.min.js?392d0f49"></script>
<script type="text/javascript" src="../js/topic.min.js?392d0f49"></script>
<script type="text/javascript">
	var topicContext = 1640;
</script>
</head>
<body>
<p class="ps7"><span class="ts3">Regexp Matching</span></p>
<p class="ps5"><span class="ts2">Use conditions with doubled [] and the =~ operator. Ensure not to quote the regular expression. Only BRE are allowed. If the regexp has whitespaces put it in a variable first.</span></p>
<p class="ps9"><span class="ts5">if [[ $string =~ ^[0-9]+$ ]]; then </span><br /><span class="ts5">&nbsp;&nbsp;&nbsp; echo &quot;Is a number&quot;</span><br /><span class="ts5">fi</span><br /><span class="ts6">&nbsp;</span></p>
<p class="ps7"><span class="ts3">Regexp Match Extraction</span></p>
<p class="ps5"><span class="ts4">Variant #1:</span><span class="ts2">&nbsp;You can do this with grouping in bash. Despite only BRE being supported grouping works also. Note how you need to set the regexp into a variable because you must not quote it in the if condition!</span></p>
<p class="ps9"><span class="ts5">REGEXP=&quot;2013:06:23 ([0-9]+):([0-9]+)&quot;</span><br /><span class="ts5">if [[ $string =~ $REGEXP ]]; then</span><br /><span class="ts5">&nbsp;&nbsp;&nbsp; echo &quot;Hour ${BASH_REMATCH[1]} Minute ${BASH_REMATCH[2]}&quot;</span><br /><span class="ts5">fi</span><br /><span class="ts6">&nbsp;</span></p>
<p class="ps10"><span class="ts4">Variant #2:</span><span class="ts2">&nbsp;Actually using &quot;expr&quot; can much simpler especially when only on value is to be extracted:</span></p>
<p class="ps9"><span class="ts5">hour=$(expr match &quot;$string&quot; '2013:06:23 \([0-9]\+\)')</span><br /><span class="ts6">&nbsp;</span></p>
<p class="ps7"><span class="ts3">Validate IPs</span></p>
<p class="ps5"><span class="ts2">If you need to validate an IP try the following function</span></p>
<p class="ps11"><span class="ts5">function validate_ip {</span><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; local net=$1</span><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [[ $net =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]] || return 1</span><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [[ ${net#*/} -le 32 ]] || return 1</span><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; local ip=${net%/*}</span><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; local -a oc=(${ip//\./ })</span><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [[ ${oc[0]} -le 255 &amp;&amp; ${oc[1]} -le 255 &amp;&amp; ${oc[2]} -le 255 &amp;&amp; ${oc[3]} -le 255 ]] || return 1</span><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0</span><br /><span class="ts5">}</span><br /><span class="ts6">&nbsp;</span></p>
<p class="ps3"><br /></p>
<div>
  <hr class="hline0" />
</div>
<p class="ps4"><span class="ts1">Created with an evaluation copy of HelpSmith.</span><br /><span class="ts1">To remove this notice, you should </span><a href="http://www.helpsmith.com/buynow.php" target="_blank" class="hs1">purchase the full version</a><span class="ts1">&nbsp;of the product.</span></p>
</body>
</html>