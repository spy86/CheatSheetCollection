<!DOCTYPE HTML>
<html id="hs-topic-p">
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Glib_XDG_Migration</title>
<meta charset="windows-1250" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content="HelpSmith 8.0 (Build 18.1202)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  margin: 0 8px 0 8px;
}
</style>
<link type="text/css" rel="stylesheet" href="../css/topics/style.css" />
<script type="text/javascript" src="../js/jquery-3.3.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?1845a896"></script>
<script type="text/javascript" src="../js/core.min.js?392d0f49"></script>
<script type="text/javascript" src="../js/topic.min.js?392d0f49"></script>
<script type="text/javascript">
	var topicContext = 920;
</script>
</head>
<body>
<p class="ps12"><span class="ts2">If you are maintaining a Linux Glib-based or GTK application for some time you might want to migrate it to the </span><a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html" class="hs0">XDG way</a><span class="ts2">&nbsp;of user data layout. Also when creating a new application you might ask yourself where to put the user data. This post tries to describe how to access the correct paths using Glib.</span></p>
<p class="ps0"><span class="ts0">1. Preparation: Categorize your data</span></p>
<p class="ps5"><span class="ts2">Determine what types of data you have. The specification knows three major directories:</span></p>
<p class="ps1"><span style="color: Black">1.</span><span style="display: inline-block; width: 18px"></span><span class="ts2">$XDG_DATA_HOME: usually ~/.local/share</span></p>
<p class="ps1"><span style="color: Black">2.</span><span style="display: inline-block; width: 18px"></span><span class="ts2">$XDG_CONFIG_HOME: usually ~/.config</span></p>
<p class="ps2"><span style="color: Black">3.</span><span style="display: inline-block; width: 18px"></span><span class="ts2">$XDG_CACHE_HOME: usually ~/.cache</span></p>
<p><span class="ts2">In each of the directories your application should create a subfolder with the unique name of the application and place relevant files there. While volatile cache files go into ~/.cache, persistent important data should go to ~/.local/share and all configuration to ~/.config.</span></p>
<p class="ps0"><span class="ts0">2. Migrate the code</span></p>
<p><span class="ts2">The simple task is to rewrite the old code creating directory paths some arbitrary way to use XDG style directory paths now. As the specification is non-trivial when finding the directory base paths (via multiple paths in $XDG_DATA_DIRS and $XDG_CONFIG_DIRS) it might be good to rely on a library for doing this.</span></p>
<p class="ps7"><span class="ts3">2.1 Using Glib</span></p>
<p class="ps5"><span class="ts2">When developing for GTK or maybe only using Glib one already gets support since GTK uses Glib and Glib 2.6 introduced support for the XDG base directory specification. So with Glib use the following methods to find the target directories:</span></p>
<div>
  <table class="tbl0">
    <tr class="row0">
      <td class="cell0">
        <p class="ps21"><span class="ts4">Directory</span></p>
      </td>
      <td class="cell0">
        <p class="ps21"><span class="ts4">Method</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell0">
        <p class="ps19"><span class="ts2">$XDG_DATA_HOME</span></p>
      </td>
      <td class="cell0">
        <p class="ps19"><span class="ts2">g_get_user_data_dir()</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell0">
        <p class="ps19"><span class="ts2">$XDG_CONFIG_HOME</span></p>
      </td>
      <td class="cell0">
        <p class="ps19"><span class="ts2">g_get_user_config_dir()</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell0">
        <p class="ps19"><span class="ts2">$XDG_CACHE_HOME</span></p>
      </td>
      <td class="cell0">
        <p class="ps19"><span class="ts2">g_get_user_cache_dir()</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps10"><span class="ts2">Given your application being named &quot;coolApp&quot; and you want to create a cache file named &quot;render.dat&quot; you could use the following C snippet:</span></p>
<p class="ps9"><span class="ts5">g_build_filename (g_get_user_cache_dir (), &quot;coolApp&quot;, &quot;render.dat&quot;, NULL);</span><br /><span class="ts6">&nbsp;</span></p>
<p class="ps12"><span class="ts2">to produce a path. Most likely you'll get something like &quot;/home/joe/.cache/coolApp/render.dat&quot;.</span></p>
<p class="ps7"><span class="ts3">2.2 Using wxWidgets</span></p>
<p class="ps5"><span class="ts2">When programming for wxWidgets you need to use the </span><a href="http://docs.wxwidgets.org/2.8/wx_wxstandardpaths.html" class="hs0">wxStandardPaths class</a><span class="ts2">. The methods are</span></p>
<div>
  <table class="tbl0">
    <tr class="row0">
      <td class="cell0">
        <p class="ps21"><span class="ts4">Directory</span></p>
      </td>
      <td class="cell0">
        <p class="ps21"><span class="ts4">Method</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell0">
        <p class="ps19"><span class="ts2">$XDG_DATA_HOME</span></p>
      </td>
      <td class="cell0">
        <p class="ps19"><span class="ts2">wxStandardPaths::GetDataDir()</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell0">
        <p class="ps19"><span class="ts2">$XDG_CONFIG_HOME</span></p>
      </td>
      <td class="cell0">
        <p class="ps19"><span class="ts2">wxStandardPaths::GetConfigDir()</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell0">
        <p class="ps19"><span class="ts2">$XDG_CACHE_HOME</span></p>
      </td>
      <td class="cell0">
        <p class="ps19"><span class="ts2">wxStandardPaths::GetLocalDataDir()</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps7"><span class="ts3">2.3 With KDE</span></p>
<p class="ps5"><span class="ts2">Since KDE 3.2 it also supports the XDG base specification. But honestly: googling our trying to browse the </span><a href="http://api.kde.org/" class="hs0">KDE API</a><span class="ts2">&nbsp;I couldn't find any pointers on how to do it. If you know please leave a comment!</span></p>
<p class="ps3"><br /></p>
<div>
  <hr class="hline0" />
</div>
<p class="ps4"><span class="ts1">Created with an evaluation copy of HelpSmith.</span><br /><span class="ts1">To remove this notice, you should </span><a href="http://www.helpsmith.com/buynow.php" target="_blank" class="hs1">purchase the full version</a><span class="ts1">&nbsp;of the product.</span></p>
</body>
</html>